classdef oidSpectrumMA < oidSpectrumFDP
   methods
      function obj = oidSpectrumMA(M,n)
         obj = obj@oidSpectrumFDP('MA',M,n);
      end
 
      function iF = informationMatrix(obj,prob)
         n = nparams(prob.model_);
         [p,m] = size(prob.model_);
         
         [Gr,Ge] = prob.model_.gradient(prob.controller);
         
         % Fixed controller or open loop
         if ~prob.controller.free
            Li    = eye(p)/prob.model.NoiseVariance;
            
            % Noise contribution
            Fe = covar(Ge,chol(kron(Li,prob.model.NoiseVariance)));
            
            % Reference contribution
            Rr = oidProblem.acf(oidProblem.vecTF(Gr),obj.M);
            CC = sdpvar((p*m)^2*(2*obj.M-1),1);
            RR = zeros(n^2,(m*p)^2*(2*obj.M-1));
            
            % C_0 (DC component)
            CC(1:(p*m)^2,:) = vec(kron(Li,obj.parameters(:,:,1)));
            for j = 1:(p*m)
               for k = 1:n
                  RR(1+(k-1)*n:k*n,1+(j-1)*(m*p):j*m*p) = ...
                     reshape(Rr(:,k+(j-1)*n,1),n,p*m);
               end
            end
            
            % C_k, k = 1,...,M 
            for i = 1:obj.M-1
                RT = Rr(:,:,i+1)';
                CC(1+i*(p*m)^2:(i+1)*(p*m)^2,:) = vec(...
                   kron(Li,obj.parameters(:,:,i+1)));
                CC(1+(obj.M+i-1)*(p*m)^2:(i+obj.M)*(p*m)^2,:) = vec(...
                   kron(Li,obj.parameters(:,:,i+1)'));
                for j = 1:(p*m)
                    for k = 1:n
                        RR(1+(k-1)*n:k*n,1+(j-1)*(m*p)+i*(m*p)^2:j*m*p+i*(m*p)^2)=...
                            reshape(Rr(:,k+(j-1)*n,i+1),n,p*m);
                        RR(1+(k-1)*n:k*n,1+(j-1)*(m*p)+(obj.M+i-1)*(m*p)^2:j*m*p+(i+obj.M-1)*(m*p)^2)=...
                            reshape(RT(:,k+(j-1)*n),n,p*m);
                    end
                end
            end
            Fr = reshape(RR*CC,n,n);
            
            % Total per sample information.
            iF = Fr + Fe;
         else
            error('Finite dimensional spectra currently only handle the fixed controller case');
         end
      end
      function Pu = inputPower(obj)
         Pu = trace(obj.parameters(:,:,1));
      end
      function Py = outputPower(obj,prob)
         G = prob.model_.tf();
         Ry = oidProblem.acf(tf(G).',obj.M);
         Py = trace(Ry(:,:,1)*obj.parameters(:,:,1));
         for m = 2:obj.M
            Py = Py + 2*trace(Ry(:,:,m)*obj.parameters(:,:,m));
         end
      end
      function [A,B,C,D] = ss(obj)
         if obj.M < 2
            A = [];
            B = [];
            C = [];
            D = 0.5*obj.parameters;
         else
            A = zeros(obj.n*(obj.M-1));
            A(obj.n+1:obj.n*(obj.M-1),1:obj.n*(obj.M-2)) = eye(obj.n*(obj.M-2));
            B = [eye(obj.n); zeros(obj.n*(obj.M-2),obj.n)];
            C = reshape(obj.parameters(:,:,2:end),obj.n,obj.n*(obj.M-1));
            D = 0.5*obj.parameters(:,:,1);
         end
      end
      function H = spectralFactor(obj,Ts)
         if obj.M < 2
            H = real(sqrtm(double(obj.parameters)))*tf(1,1,Ts);
         else
            [A,B,C,D] = obj.ss();
            C = double(C);
            D = double(D);
            R = -D-D';
            S = -B;
            [P,~,~,rep] = dare(A',C',0*A,R,S);
            if rep == -1
               % "Add some noise" to system to get Symplectic spectrum away
               % from unit circle
               P = dare(A',C',0*A,R-1e-10*eye(size(R)),S);
            end
            L = D+D'-C*P*C';
            K = -(A*P*C'-B)*pinv(L);
            
            % This is the theoretical spectral factor, it is not used due to numerical
            % issues. An ad hoc method for cleaning up the numerics is implemented as
            % optH.
            % optH = tf(ss(A,K,C,eye(size(C,1)),Ts))*sqrtm(L);
            H = tf();
            for i = 1:obj.n
               [b,a] = ss2tf(A,K,C,eye(size(C,1)),i);
               b(abs(b)<1e-12) = 0;
               b = b(:,1:obj.M);
               b = mat2cell(b,ones(1,obj.n),obj.M);
               H(:,i) = tf(b,a(1:obj.M),Ts);
            end
            H = minreal(H*real(sqrtm(L)));
         end
      end
   end
end